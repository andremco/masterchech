{"version":3,"sources":["components/ModalConfirmDelete.js","components/IconActions.js","components/TableList.js","components/ModalConfirmSuccess.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["ModalConfirmDelete","props","react_default","a","createElement","Fragment","Modal","isOpen","openModal","toggle","className","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","IconActions","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","clickOnTrash","openOrCloseModal","setState","prevState","index_es","icon","faTrashAlt","components_ModalConfirmDelete","React","Component","TableList","style","marginTop","Table","scope","components_IconActions","ModalConfirmSuccess","faCheckCircle","Form","validate","values","errors","category","toLowerCase","description","onSubmit","setSubmitting","openOrCloseModalSuccess","form","handleSubmit","FormGroup","Label","for","Input","type","name","id","onChange","handleChange","onBlur","handleBlur","value","invalid","FormFeedback","height","outline","float","disabled","isSubmitting","openModalSuccess","toggleSuccess","formik_esm","initialValues","components_ModalConfirmSuccess","App","Navbar","NavbarBrand","href","target","components_TableList","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cc330fa.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nfunction ModalConfirmDelete(props){\n    return(<React.Fragment>\n        <Modal isOpen={props.openModal} toggle={props.toggle} className={props.className}>\n          <ModalHeader toggle={props.toggle}>Deseja excluir o item?</ModalHeader>\n          <ModalBody>\n            Você está certo disso? Valendo um milhão de reais\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"danger\" onClick={props.toggle}>Sim</Button>{' '}\n            <Button color=\"secondary\" onClick={props.toggle}>Não</Button>\n          </ModalFooter>\n        </Modal>\n      </React.Fragment>);\n}\n\nexport default ModalConfirmDelete;","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport ModalConfirmDelete from './ModalConfirmDelete';\n\nclass IconActions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openModal: false\n    };\n\n    this.toggle = this.toggle.bind(this);\n    this.clickOnTrash = this.clickOnTrash.bind(this);\n    this.openOrCloseModal = this.openOrCloseModal.bind(this);\n  }\n\n  clickOnTrash(){\n    this.openOrCloseModal();\n  }\n\n  toggle() {\n    this.openOrCloseModal();\n  }\n\n  openOrCloseModal(){\n    this.setState(prevState => ({\n        openModal: !prevState.openModal\n      }));\n  }\n\n  render() {\n    return (\n        <React.Fragment>\n          <FontAwesomeIcon icon={faTrashAlt} color=\"red\" className=\"pointer\" onClick={this.clickOnTrash}></FontAwesomeIcon>\n          <ModalConfirmDelete openModal={this.state.openModal} toggle={this.toggle}></ModalConfirmDelete>\n        </React.Fragment>\n    );\n  }\n}\n\nexport default IconActions;","import React from 'react';\nimport { Table } from 'reactstrap';\nimport IconActions from './IconActions'\n\nfunction TableList(props){\n    return (<div className=\"col-lg-6 col-md-12 mx-auto\">\n    <div className=\"table-responsive-sm\" style={ { marginTop: \"80px\" } }>\n      <h3>Receitas cadastradas</h3>\n      <Table>\n        <thead>\n          <tr>\n            <th></th>\n            <th>Categoria</th>\n            <th>Descrição</th>\n            <th>Ações</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th scope=\"row\">1</th>\n            <td>Mark</td>\n            <td>Otto</td>\n            <td><IconActions></IconActions></td>\n          </tr>\n          <tr>\n            <th scope=\"row\">2</th>\n            <td>Jacob</td>\n            <td>Thornton</td>\n            <td><IconActions></IconActions></td>\n          </tr>\n          <tr>\n            <th scope=\"row\">3</th>\n            <td>Larry</td>\n            <td>the Bird</td>\n            <td><IconActions></IconActions></td>\n          </tr>\n        </tbody>\n      </Table>            \n    </div>\n  </div>);\n}\n\nexport default TableList;","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheckCircle} from '@fortawesome/free-solid-svg-icons'\n\n\nfunction ModalConfirmSuccess(props){\n    return(<React.Fragment>\n        <Modal isOpen={props.openModal} toggle={props.toggle} className={props.className}>\n          <ModalHeader toggle={props.toggle}>Sucesso</ModalHeader>\n          <ModalBody>\n            Receita cadastrada com sucesso! <FontAwesomeIcon icon={faCheckCircle} color=\"green\"></FontAwesomeIcon>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"success\" onClick={props.toggle}>Ok</Button>\n          </ModalFooter>\n        </Modal>\n      </React.Fragment>);\n}\n\nexport default ModalConfirmSuccess;","import React from 'react';\nimport { FormGroup, Input, Label, Button, Alert, FormFeedback } from 'reactstrap';\nimport { Formik, ErrorMessage } from 'formik'\nimport ModalConfirmSuccess from \"./ModalConfirmSuccess\";\n\nclass Form extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            openModalSuccess: false\n        }\n        this.toggleSuccess = this.toggleSuccess.bind(this);\n        this.openOrCloseModalSuccess = this.openOrCloseModalSuccess.bind(this);\n    }\n\n    toggleSuccess() {\n        this.openOrCloseModalSuccess();\n    }\n\n    openOrCloseModalSuccess(){\n        this.setState(prevState => ({\n                openModalSuccess: !prevState.openModalSuccess\n            }));\n    }\n\n    validate = (values) => {\n\n        let errors = {};\n    \n        if (!values.category || values.category.toLowerCase() === 'selecione') {\n            errors.category = 'O campo categoria é obrigatório!';\n        } \n        \n        if(!values.description) {\n            errors.description = 'O campo categoria é obrigatório!';\n        }\n    \n        return errors;\n    }\n    \n    onSubmit = (values, props) => {\n        debugger;\n        props.setSubmitting(false);\n        this.openOrCloseModalSuccess();\n    }\n    \n    form = (props) => (\n        <React.Fragment>\n            <form onSubmit={props.handleSubmit}>\n                <FormGroup>\n                    <Label for=\"category\">Categoria</Label>\n                    <Input type=\"select\" name=\"category\" id=\"category\" onChange={props.handleChange}\n                    onBlur={props.handleBlur} value={props.values.category} invalid={(props.errors.category) ? true : false}>\n                        <option value=\"selecione\">Selecione</option>\n                        <option value=\"receita\">Receita</option>\n                    </Input>\n                    {props.errors.category && <FormFeedback>{props.errors.category}</FormFeedback>}\n                    \n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"description\">Descrição</Label>\n                    <Input type=\"textarea\" name=\"description\" id=\"description\" onChange={props.handleChange}\n                    onBlur={props.handleBlur} value={props.values.description} invalid={(props.errors.description) ? true : false}/>\n                    {props.errors.description && <FormFeedback>{props.errors.description}</FormFeedback>}\n                </FormGroup>\n                <FormGroup style={{height: \"80px\"}}>\n                    <Button outline color=\"info\" style={{float: \"right\"}} disabled={props.isSubmitting}>Enviar</Button>      \n                </FormGroup> \n            </form>\n        </React.Fragment>)\n\n    render(){\n        var initialValues = {category: '', description: ''}\n\n        return(<div className=\"col-lg-6 col-md-12 mx-auto\" style={{marginTop: \"30px\"}}>\n            <h3>Cadastrar receita</h3>\n            <Formik initialValues={initialValues} onSubmit={this.onSubmit} validate={this.validate}>\n                {this.form}\n            </Formik>\n            {this.state.openModalSuccess && <ModalConfirmSuccess openModal={this.state.openModalSuccess} toggle={this.toggleSuccess}></ModalConfirmSuccess>}\n        </div>);\n    }\n\n}\n\nexport default Form;","import React from 'react';\nimport { Navbar, FormGroup, NavbarBrand, Input, Label, Button } from 'reactstrap';\nimport TableList from \"./components/TableList\";\nimport Form from \"./components/Form\";\nimport './App.css';\n\nfunction App(){\n  return (<div>\n    <Navbar className=\"app-navbar fixed-top\">\n      <NavbarBrand href=\"https://telegram.me/ZueroTopBot\" target=\"_blank\" className=\"app-navbar-brand\">@ZueroTopBot</NavbarBrand>\n      {/* <NavbarBrand href=\"https://telegram.me/ZueroTopBot\" target=\"_blank\" className=\"app-navbar-brand\">Receitas</NavbarBrand> */}\n    </Navbar>\n    <div className=\"container d-flex h-100\">\n      <div className=\"align-self-center w-100\">\n          <TableList></TableList> \n          <Form></Form>\n      </div>\n    </div>\n    <div className=\"footer\">\n      <p>Bot for telegram &#129302;</p>\n      {/* <p>Receitas &#129302;</p> */}\n    </div>\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}