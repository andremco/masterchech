{"version":3,"sources":["constants/initialState.js","constants/types.js","reducers/root.js","store/configureStore.prod.js","store/configureStore.dev.js","reducers/loading.js","reducers/error.js","reducers/categories.js","reducers/menuDescriptions.js","store/configureStore.js","API/API.js","actions/error.js","actions/loading.js","actions/categories.js","actions/menuDescriptions.js","components/modals/ModalConfirmSuccess.js","components/modals/ModalConfirmDelete.js","components/modals/ModalUpdate.js","components/modals/IconActions.js","components/page/CatalogMenuDescriptionPage.js","App.js","serviceWorker.js","index.js"],"names":["constants_initialState","error","loading","menuDescriptions","categories","app","ERROR","LOADED","LOADING","CREATE","GET","UPDATE","DELETE","store","rootReducer","combineReducers","state","arguments","length","undefined","initialState","type","types","action","nextState","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","category","value","id","err","return","Object","assign","menuDescription","menuDescriptionId","filter","m","__PRODUCTION__","createStore","compose","applyMiddleware","thunk","createdStore","window","__REDUX_DEVTOOLS_EXTENSION__","API","process","REACT_APP_API_URL","REACT_APP_API_KEY_HEADER","resource","apiUrl","getApiUrl","apiKeyHeader","getApiKeyHeader","Error","fetch","headers","Accept","Content-Type","APIKey","method","data","body","JSON","stringify","createError","info","loaded","getAllCategories","dispatch","get","then","res","json","response","catch","createMenuDescription","payload","openModalSuccess","post","success","getAllMenuDescriptions","updateMenuDescription","toggleModal","put","deleteMenuDescription","delete","ModalConfirmSuccess","props","react_default","a","createElement","Fragment","Modal","isOpen","openModal","toggle","className","ModalHeader","ModalBody","index_es","icon","faCheckCircle","color","ModalFooter","Button","onClick","ModalConfirmDelete","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteDescription","descriptionId","React","Component","ModalUpdate","validate","values","errors","description","onSubmit","setSubmitting","categoryId","form","handleSubmit","FormGroup","Label","for","Input","name","onChange","handleChange","disabled","onBlur","handleBlur","invalid","nameCategory","FormFeedback","maxLength","style","height","outline","float","isSubmitting","initialValues","formik_esm","IconActions","openModalDelete","openModalUpdate","toggleModalDelete","bind","assertThisInitialized","toggleModalUpdate","clickOnTrash","clickOnEdit","openOrCloseModalDelete","openOrCloseModalUpdate","setState","prevState","faEdit","marginRight","faTrashAlt","modals_ModalUpdate","modals_ModalConfirmDelete","CatalogMenuDescriptionPage","toLowerCase","actions","openOrCloseModalSuccess","map","item","i","key","marginTop","modals_ModalConfirmSuccess","marginBottom","CatalogMenuDescriptionPage_MenuDescriptionsTable","MenuDescriptionsTable","columns","label","field","sort","width","rows","index","modals_IconActions","mdbreact_esm","striped","bordered","hover","paginationLabel","infoLabel","entriesLabel","searchLabel","connect","bindActionCreators","dotenv","config","configureStore","App","es","react_router_dom","Navbar","expand","NavbarBrand","href","target","Nav","navbar","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0b711be.chunk.js","sourcesContent":["/**\r\n * Initial state for the redux store\r\n * @type {Object}\r\n */\r\nexport default {\r\n    error: null,\r\n    loading: false,\r\n    menuDescriptions: [],\r\n    categories: []\r\n};\r\n","export const app = {\r\n    ERROR: 'masterchech/app/error',\r\n    LOADED: 'masterchech/app/loaded',\r\n    LOADING: 'masterchech/app/loading'\r\n}\r\n\r\nexport const menuDescriptions = {\r\n    CREATE: 'masterchech/menuDescriptions/create',\r\n    GET: 'masterchech/menuDescriptions/get',\r\n    UPDATE: 'masterchech/menuDescriptions/update',\r\n    DELETE: 'masterchech/menuDescriptions/delete'\r\n}\r\n\r\nexport const categories = {\r\n    CREATE: 'masterchech/categories/create',\r\n    GET: 'masterchech/categories/get',\r\n    UPDATE: 'masterchech/categories/update',\r\n    DELETE: 'masterchech/categories/delete'\r\n}","import { combineReducers } from 'redux'\r\nimport { loading } from \"./loading\";\r\nimport { error } from \"./error\";\r\nimport { categories } from \"./categories\";\r\nimport { menuDescriptions } from \"./menuDescriptions\";\r\n\r\n\r\nconst rootReducer = combineReducers({ \r\n    loading,\r\n    error,\r\n    categories,\r\n    menuDescriptions\r\n});\r\n\r\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux'\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from '../reducers/root'\r\n\r\nlet store;\r\nexport default function configureStore(initialState) { \r\n    if (store) {\r\n        return store;\r\n    }\r\n    store = createStore(rootReducer, initialState, compose(applyMiddleware(thunk)));\r\n    return store;\r\n}","import thunk from 'redux-thunk'\r\n\r\nimport { createStore, compose, applyMiddleware } from 'redux'\r\n\r\nimport rootReducer from '../reducers/root'\r\n\r\nlet store;\r\nexport default initialState => {\r\n    if (store) { \r\n        return store;\r\n    }\r\n    const createdStore = createStore(\r\n                            rootReducer,\r\n                            initialState,\r\n                            compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__()) \r\n                        );\r\n    store = createdStore;\r\n    return store;\r\n}","import initialState from '../constants/initialState';\r\nimport * as types from '../constants/types';\r\n\r\n/**\r\n * The loading reducer controls the global loading state\r\n * @method loading\r\n * @module letters/reducers\r\n * @param  {boolean} [state=initialState.loading] prev/initial state\r\n * @param  {object} action                       Redux action\r\n * @return {object}                              next state\r\n */\r\nexport function loading(state = initialState.loading, action) {\r\n    switch (action.type) {\r\n        case types.app.LOADING:\r\n            return true;\r\n        case types.app.LOADED:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import initialState from '../constants/initialState';\r\nimport * as types from '../constants/types';\r\n\r\n/**\r\n * The user reducer is responsible\r\n * @method error\r\n * @module letters/reducers\r\n * @param  {object} [state=initialState.user] object\r\n * @param  {object} action                    Redux action\r\n * @return {object}                           next state\r\n */\r\nexport function error(state = initialState.error, action) {\r\n    switch (action.type) {\r\n        case types.app.ERROR:\r\n            return action.error;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import initialState from '../constants/initialState'\r\nimport * as types from '../constants/types'\r\n\r\nexport function categories(state = initialState.categories, action) {\r\n    switch (action.type) { \r\n        case types.categories.GET: {\r\n            const { categories } = action\r\n            let nextState = state\r\n            for (let category of categories) {\r\n                if (!nextState[category.id]) {\r\n                    nextState[category.id] = category\r\n                }\r\n            }\r\n            return nextState\r\n        }\r\n        case types.categories.CREATE: { \r\n            const { category } = action\r\n            let nextState = Object.assign({}, state)\r\n            nextState[category.id] = category\r\n            return nextState\r\n        }\r\n        default: \r\n            return state\r\n    }\r\n}","import initialState from '../constants/initialState'\r\nimport * as types from '../constants/types'\r\n\r\nexport function menuDescriptions(state = initialState.menuDescriptions, action) {\r\n    switch (action.type) { \r\n        case types.menuDescriptions.GET: {\r\n            const { menuDescriptions } = action\r\n            return menuDescriptions\r\n        }\r\n        case types.menuDescriptions.CREATE: { \r\n            const { menuDescription } = action\r\n            let nextState = state\r\n            nextState[nextState.length + 1] = menuDescription\r\n            return nextState\r\n        }\r\n        case types.menuDescriptions.DELETE: { \r\n            const { menuDescriptionId } = action\r\n            let nextState = state\r\n            return nextState.filter(m => m.id !== menuDescriptionId);\r\n        }\r\n        default: \r\n            return state\r\n    }\r\n}","import { __PRODUCTION__ } from 'environs'\r\nimport prodStore from './configureStore.prod'\r\nimport devStore from './configureStore.dev'\r\n\r\nexport default __PRODUCTION__ ? prodStore : devStore","class API {\r\n\r\n    static getApiUrl(){\r\n        return process.env.REACT_APP_API_URL;\r\n    }\r\n\r\n    static getApiKeyHeader(){\r\n        return process.env.REACT_APP_API_KEY_HEADER;\r\n    }\r\n\r\n    static get(resource){\r\n        const apiUrl = API.getApiUrl();\r\n        const apiKeyHeader = API.getApiKeyHeader();\r\n        if(!apiUrl || !apiKeyHeader){\r\n            throw new Error(\"null environments variables!\");\r\n        }\r\n\r\n       return fetch(apiUrl + resource, {\r\n           headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'APIKey': apiKeyHeader\r\n           },\r\n           method: 'GET'\r\n       });\r\n    }\r\n\r\n    static post(resource, data){\r\n        const apiUrl = API.getApiUrl();\r\n        const apiKeyHeader = API.getApiKeyHeader();\r\n        if(!apiUrl || !apiKeyHeader){\r\n            throw new Error(\"null environments variables!\");\r\n        }\r\n\r\n        return fetch(apiUrl + resource, {\r\n            headers: {\r\n             'Accept': 'application/json',\r\n             'Content-Type': 'application/json',\r\n             'APIKey': apiKeyHeader\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    static put(resource, data){\r\n        const apiUrl = API.getApiUrl();\r\n        const apiKeyHeader = API.getApiKeyHeader();\r\n        if(!apiUrl || !apiKeyHeader){\r\n            throw new Error(\"null environments variables!\");\r\n        }\r\n\r\n        return fetch(apiUrl + resource, {\r\n            headers: {\r\n             'Accept': 'application/json',\r\n             'Content-Type': 'application/json',\r\n             'APIKey': apiKeyHeader\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n\r\n    static delete(resource){\r\n        const apiUrl = API.getApiUrl();\r\n        const apiKeyHeader = API.getApiKeyHeader();\r\n        if(!apiUrl || !apiKeyHeader){\r\n            throw new Error(\"null environments variables!\");\r\n        }\r\n\r\n       return fetch(apiUrl + resource, {\r\n           headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'APIKey': apiKeyHeader\r\n           },\r\n           method: 'DELETE'\r\n       });\r\n    }\r\n }\r\n\r\n export default API;","import * as types from '../constants/types'\r\n\r\n/**\r\n * Create an error\r\n * @method createError\r\n \r\n * @param  {object}    error Error object, either from a component or application code\r\n * @param  {string}    info  error description\r\n * @return {object}\r\n */\r\n\r\nexport function createError(error, info) { \r\n    return {\r\n        type: types.app.ERROR,\r\n        error,\r\n        info \r\n    }\r\n}","import * as types from '../constants/types' \r\n\r\nexport function loading() {\r\n    return {\r\n        type: types.app.LOADING \r\n    }\r\n}\r\n\r\nexport function loaded() { \r\n    return {\r\n        type: types.app.LOADED\r\n    }\r\n}","import * as types from '../constants/types'\r\nimport API from '../API/API'\r\nimport { createError } from './error'\r\nimport { loaded, loading } from \"./loading\";\r\n\r\nexport function updateCategories(categories) {\r\n    return {\r\n        type: types.categories.GET,\r\n        categories\r\n    }\r\n}\r\n\r\nexport function getAllCategories() {\r\n    return dispatch => {\r\n        dispatch(loading());\r\n        return API.get(\"category\")\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                if(response && response.data){\r\n                    dispatch(updateCategories(response.data))\r\n                    dispatch(loaded())\r\n                }\r\n            })\r\n            .catch(err => { \r\n                dispatch(createError(err))\r\n                dispatch(loaded())\r\n            })\r\n    }\r\n}","import * as types from '../constants/types'\r\nimport API from '../API/API'\r\nimport { createError } from './error'\r\nimport { loaded, loading } from \"./loading\";\r\n\r\nexport function updateGetMenuDescriptions(menuDescriptions) {\r\n    return {\r\n        type: types.menuDescriptions.GET,\r\n        menuDescriptions\r\n    }\r\n}\r\n\r\nexport function updateDeleteMenuDescriptions(menuDescriptionId) {\r\n    return {\r\n        type: types.menuDescriptions.DELETE,\r\n        menuDescriptionId\r\n    }\r\n}\r\n\r\nexport function createMenuDescription(payload, openModalSuccess) {\r\n    return dispatch => {\r\n        dispatch(loading());\r\n        return API.post(\"description\", payload)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                dispatch(loaded())\r\n                if(response && response.success){\r\n                    openModalSuccess()\r\n                    dispatch(getAllMenuDescriptions())\r\n                }\r\n            })\r\n            .catch(err => { \r\n                dispatch(createError(err))\r\n                dispatch(loaded())\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateMenuDescription(payload, toggleModal) {\r\n    return dispatch => {\r\n        dispatch(loading());\r\n        return API.put(\"description\", payload)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                dispatch(loaded())\r\n                if(response && response.success){\r\n                    toggleModal()\r\n                    dispatch(getAllMenuDescriptions())\r\n                }\r\n            })\r\n            .catch(err => { \r\n                dispatch(createError(err))\r\n                dispatch(loaded())\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAllMenuDescriptions() {\r\n    return dispatch => {\r\n        dispatch(loading());\r\n        return API.get(\"description\")\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                dispatch(updateGetMenuDescriptions(response.data))\r\n                dispatch(loaded())\r\n            })\r\n            .catch(err => { \r\n                dispatch(createError(err))\r\n                dispatch(loaded())\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteMenuDescription(menuDescriptionId) {\r\n    return dispatch => {\r\n        dispatch(loading());\r\n        return API.delete(\"description/\" + menuDescriptionId)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                if(response && response.success){\r\n                    dispatch(getAllMenuDescriptions())\r\n                }\r\n                dispatch(loaded())\r\n            })\r\n            .catch(err => { \r\n                dispatch(createError(err))\r\n                dispatch(loaded())\r\n            })\r\n    }\r\n}","import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nfunction ModalConfirmSuccess(props){\r\n    return(<React.Fragment>\r\n        <Modal isOpen={props.openModal} toggle={props.toggle} className={props.className}>\r\n          <ModalHeader toggle={props.toggle}>Sucesso</ModalHeader>\r\n          <ModalBody>\r\n            Receita cadastrada com sucesso! <FontAwesomeIcon icon={faCheckCircle} color=\"green\"></FontAwesomeIcon>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"success\" onClick={props.toggle}>Ok</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </React.Fragment>);\r\n}\r\n\r\nexport default ModalConfirmSuccess;","import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nclass ModalConfirmDelete extends React.Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n    }\r\n\r\n    deleteDescription = () => {\r\n      var id = this.props.descriptionId;\r\n\r\n      this.props.deleteMenuDescription(id)\r\n\r\n      this.props.toggle();\r\n    }\r\n\r\n    render(){\r\n      return(<React.Fragment>\r\n              <Modal isOpen={this.props.openModal} toggle={this.props.toggle} className={this.props.className}>\r\n                <ModalHeader toggle={this.props.toggle}>Deseja excluir o item?</ModalHeader>\r\n                <ModalBody>\r\n                  Você está certo disso? Valendo um milhão de reais\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                  <Button color=\"danger\" onClick={this.deleteDescription}>Sim</Button>{' '}\r\n                  <Button color=\"secondary\" onClick={this.props.toggle}>Não</Button>\r\n                </ModalFooter>\r\n              </Modal>\r\n      </React.Fragment>)\r\n    };\r\n}\r\n\r\nexport default ModalConfirmDelete;","import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { FormGroup, Input, Label, FormFeedback } from 'reactstrap';\r\nimport { Formik } from 'formik'\r\n\r\nclass ModalUpdate extends React.Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n    }\r\n\r\n    deleteDescription = () => {\r\n\r\n    }\r\n\r\n    validate = (values) => {\r\n\r\n        let errors = {};\r\n    \r\n        if (!values.category) {\r\n            errors.category = 'O campo categoria é obrigatório!';\r\n        } \r\n        \r\n        if(!values.description) {\r\n            errors.description = 'O campo categoria é obrigatório!';\r\n        }\r\n    \r\n        return errors;\r\n    }\r\n\r\n    onSubmit = (values, props) => {\r\n        props.setSubmitting(false);\r\n\r\n        var data = {\"id\": this.props.description.id, \"categoryId\": values.category, \"description\": values.description}\r\n\r\n        this.props.updateMenuDescription(data, this.props.toggle);\r\n    }\r\n\r\n    form = (props) => (\r\n        <React.Fragment>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <FormGroup>\r\n                    <Label for=\"category\">Categoria</Label>\r\n                    <Input type=\"select\" name=\"category\" id=\"category\" onChange={props.handleChange} disabled\r\n                    onBlur={props.handleBlur} value={props.values.category} invalid={(props.errors.category) ? true : false}>\r\n                        <option value=\"selecione\">Selecione</option>\r\n                        <option value={props.values.category}>{this.props.description.nameCategory}</option>\r\n                    </Input>\r\n                    {props.errors.category && <FormFeedback>{props.errors.category}</FormFeedback>}\r\n                    \r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"description\">Descrição</Label>\r\n                    <Input type=\"textarea\" name=\"description\" id=\"description\" onChange={props.handleChange} maxLength={250}\r\n                    onBlur={props.handleBlur} value={props.values.description} invalid={(props.errors.description) ? true : false}/>\r\n                    {props.errors.description && <FormFeedback>{props.errors.description}</FormFeedback>}\r\n                </FormGroup>\r\n                <FormGroup style={{height: \"80px\"}}>\r\n                    <Button outline color=\"info\" style={{float: \"right\"}} disabled={props.isSubmitting} className={\"btn-sm\"}>Enviar</Button>      \r\n                </FormGroup> \r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n\r\n    render(){\r\n\r\n        var initialValues = {category: this.props.description.categoryId, description: this.props.description.description}\r\n\r\n        return(<React.Fragment>\r\n              <Modal isOpen={this.props.openModal} toggle={this.props.toggle} className={this.props.className}>\r\n                <ModalHeader toggle={this.props.toggle}>Atualizar catálogo</ModalHeader>                \r\n                <ModalBody>\r\n                    <Formik initialValues={initialValues} onSubmit={this.onSubmit} validate={this.validate}>\r\n                        {this.form}\r\n                    </Formik>    \r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={this.props.toggle}>Sair</Button>\r\n                </ModalFooter>    \r\n              </Modal>\r\n            </React.Fragment>)\r\n    };\r\n}\r\n\r\nexport default ModalUpdate;","import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faEdit } from '@fortawesome/free-solid-svg-icons'\r\nimport ModalConfirmDelete from './ModalConfirmDelete';\r\nimport ModalUpdate from \"./ModalUpdate\";\r\n\r\nclass IconActions extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      openModalDelete: false,\r\n      openModalUpdate: false\r\n    };\r\n\r\n    this.toggleModalDelete = this.toggleModalDelete.bind(this);\r\n    this.toggleModalUpdate = this.toggleModalUpdate.bind(this);\r\n    this.clickOnTrash = this.clickOnTrash.bind(this);\r\n    this.clickOnEdit = this.clickOnEdit.bind(this);\r\n    this.openOrCloseModalDelete = this.openOrCloseModalDelete.bind(this);\r\n    this.openOrCloseModalUpdate = this.openOrCloseModalUpdate.bind(this);\r\n  }\r\n\r\n  clickOnTrash(){\r\n    this.openOrCloseModalDelete();\r\n  }\r\n\r\n  clickOnEdit(){\r\n    this.openOrCloseModalUpdate();\r\n  }\r\n\r\n  toggleModalDelete() {\r\n    this.openOrCloseModalDelete();\r\n  }\r\n\r\n  toggleModalUpdate(){\r\n    this.openOrCloseModalUpdate();\r\n  }\r\n\r\n  openOrCloseModalDelete(){\r\n    this.setState(prevState => ({\r\n      openModalDelete: !prevState.openModalDelete\r\n      }));\r\n  }\r\n\r\n  openOrCloseModalUpdate(){\r\n    this.setState(prevState => ({\r\n      openModalUpdate: !prevState.openModalUpdate\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n          <FontAwesomeIcon icon={faEdit} color=\"turquoise\" className=\"pointer\" onClick={this.clickOnEdit} style={{ marginRight: \"5px\"}}></FontAwesomeIcon>\r\n          <FontAwesomeIcon icon={faTrashAlt} color=\"red\" className=\"pointer\" onClick={this.clickOnTrash}></FontAwesomeIcon>\r\n          <ModalUpdate openModal={this.state.openModalUpdate} toggle={this.toggleModalUpdate} description={this.props.description} \r\n            updateMenuDescription={this.props.updateMenuDescription}></ModalUpdate>\r\n          <ModalConfirmDelete openModal={this.state.openModalDelete} toggle={this.toggleModalDelete} descriptionId={this.props.description.id} \r\n            deleteMenuDescription={this.props.deleteMenuDescription}></ModalConfirmDelete>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IconActions;","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { getAllCategories } from \"../../actions/categories\";\r\nimport { getAllMenuDescriptions, createMenuDescription, deleteMenuDescription, updateMenuDescription } from \"../../actions/menuDescriptions\";\r\nimport { FormGroup, Input, Label, Button, Alert, FormFeedback } from 'reactstrap';\r\nimport { Formik } from 'formik'\r\nimport ModalConfirmSuccess from \"../modals/ModalConfirmSuccess\";\r\nimport LoadingOverlay from 'react-loading-overlay'\r\n//import PacmanLoader from '@bit/davidhu2000.react-spinners.pacman-loader';\r\nimport { MDBDataTable } from 'mdbreact';\r\nimport IconActions from '../modals/IconActions'\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport 'mdbreact/dist/css/mdb.css'\r\n\r\nclass CatalogMenuDescriptionPage extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            openModalSuccess: false,\r\n        }\r\n        this.openOrCloseModalSuccess = this.openOrCloseModalSuccess.bind(this);\r\n    }\r\n    \r\n    openOrCloseModalSuccess(){\r\n        this.setState(prevState => ({\r\n                openModalSuccess: !prevState.openModalSuccess\r\n            }));\r\n    }\r\n\r\n    validate = (values) => {\r\n\r\n        let errors = {};\r\n    \r\n        if (!values.category || values.category.toLowerCase() === 'selecione') {\r\n            errors.category = 'O campo categoria é obrigatório!';\r\n        } \r\n        \r\n        if(!values.description) {\r\n            errors.description = 'O campo categoria é obrigatório!';\r\n        }\r\n    \r\n        return errors;\r\n    }\r\n\r\n    onSubmit = (values, props) => {\r\n        props.setSubmitting(false);\r\n\r\n        var data = {\"categoryId\": values.category, \"description\": values.description}\r\n\r\n        this.props.actions.createMenuDescription(data, this.openOrCloseModalSuccess);\r\n    }\r\n    \r\n    form = (props) => (\r\n        <React.Fragment>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <FormGroup>\r\n                    <Label for=\"category\">Categoria</Label>\r\n                    <Input type=\"select\" name=\"category\" id=\"category\" onChange={props.handleChange}\r\n                    onBlur={props.handleBlur} value={props.values.category} invalid={(props.errors.category) ? true : false}>\r\n                        <option value=\"selecione\">Selecione</option>\r\n                        {\r\n                            this.props.categories && this.props.categories.map((item, i) => <option key={i} value={item.id}>{item.name}</option>) \r\n                        }\r\n                    </Input>\r\n                    {props.errors.category && <FormFeedback>{props.errors.category}</FormFeedback>}\r\n                    \r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"description\">Descrição</Label>\r\n                    <Input type=\"textarea\" name=\"description\" id=\"description\" onChange={props.handleChange} maxLength={250}\r\n                    onBlur={props.handleBlur} value={props.values.description} invalid={(props.errors.description) ? true : false}/>\r\n                    {props.errors.description && <FormFeedback>{props.errors.description}</FormFeedback>}\r\n                </FormGroup>\r\n                <FormGroup style={{height: \"80px\"}}>\r\n                    <Button outline color=\"info\" style={{float: \"right\"}} disabled={props.isSubmitting} className={\"btn-sm\"}>Enviar</Button>      \r\n                </FormGroup> \r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n\r\n    componentDidMount(){\r\n        this.props.actions.getAllCategories();\r\n        this.props.actions.getAllMenuDescriptions();\r\n    }\r\n\r\n    render(){\r\n        var initialValues = {category: '', description: ''}\r\n\r\n        return(<React.Fragment>\r\n                <div className=\"col-lg-6 col-md-12 mx-auto\" style={{marginTop: \"80px\"}}>\r\n                    {/* <LoadingOverlay active={this.props.loading} \r\n                        spinner={\r\n                          <PacmanLoader size={20} color=\"#61dafb\" style={{width:\"5px !important\", height:\"5px !important\", zIndex: \"9999\" }}/>\r\n                        }>\r\n                    </LoadingOverlay> */}\r\n                    <h3>Cadastrar menu</h3>\r\n                    <Formik initialValues={initialValues} onSubmit={this.onSubmit} validate={this.validate}>\r\n                        {this.form}\r\n                    </Formik>\r\n                    {this.state.openModalSuccess && <ModalConfirmSuccess openModal={this.state.openModalSuccess} toggle={this.openOrCloseModalSuccess}></ModalConfirmSuccess>}\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-12 mx-auto\" style={{marginTop: \"25px\", marginBottom: \"55px\"}}>\r\n                    <MenuDescriptionsTable data={this.props.menuDescriptions} \r\n                      getAllMenuDescriptions={this.props.actions.getAllMenuDescriptions} \r\n                      deleteMenuDescription={this.props.actions.deleteMenuDescription}\r\n                      updateMenuDescription={this.props.actions.updateMenuDescription}>\r\n                    </MenuDescriptionsTable>\r\n                </div>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst MenuDescriptionsTable = (props) => {\r\n  var data = {\r\n    columns: [\r\n      {\r\n        label: '#',\r\n        field: 'id',\r\n        sort: 'asc',\r\n        width: 80\r\n      },\r\n      {\r\n        label: 'Categoria',\r\n        field: 'nameCategory',\r\n        sort: 'asc',\r\n        width: 80\r\n      },\r\n      {\r\n        label: 'Descrição',\r\n        field: 'description',\r\n        sort: 'asc',\r\n        width: 200\r\n      },\r\n      {\r\n        label: 'Ações',\r\n        field: 'actions',\r\n        width: 80\r\n      }\r\n    ],\r\n    rows: [\r\n    ]\r\n  };\r\n\r\n  if(props){\r\n    for(let index in props.data){\r\n      var id = props.data[index].description\r\n\r\n      data.rows[index] = {\r\n        id: props.data[index].id,\r\n        nameCategory: props.data[index].nameCategory,\r\n        description: props.data[index].description,\r\n        actions: <IconActions description={props.data[index]} \r\n                              deleteMenuDescription={props.deleteMenuDescription}\r\n                              updateMenuDescription={props.updateMenuDescription}>\r\n                  </IconActions>\r\n      }\r\n    }\r\n  }\r\n\r\n  if(data.rows.length > 0){\r\n    return (<React.Fragment>\r\n      <h3>Catálogo/Menu do Master Chech!</h3>\r\n      <MDBDataTable\r\n        striped\r\n        bordered\r\n        hover\r\n        data={data}\r\n        paginationLabel={[\"Anterior\", \"Próximo\"]}\r\n        infoLabel={[\"Exibindo\", \"para\", \"total de\", \"resultados\"]}\r\n        entriesLabel={\"Exibir\"}\r\n        searchLabel={\"Pesquisar\"}\r\n      />\r\n    </React.Fragment>);\r\n  }\r\n\r\n  return null\r\n\r\n}\r\n\r\nexport const mapStateToProps = state => {\r\n    return state\r\n} \r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n    return {\r\n        actions: bindActionCreators({\r\n           getAllCategories,\r\n           getAllMenuDescriptions,\r\n           createMenuDescription,\r\n           deleteMenuDescription,\r\n           updateMenuDescription    \r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CatalogMenuDescriptionPage);","import React from 'react';\r\nimport { Navbar, FormGroup, NavbarBrand, Input, Label, Button, Nav, NavItem, NavLink, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\r\nimport { Provider } from \"react-redux\";\r\nimport  initialState  from \"./constants/initialState\";\r\nimport  configureStore  from \"./store/configureStore\";\r\nimport CatalogMenuDescriptionPage from \"./components/page/CatalogMenuDescriptionPage\";\r\nimport './App.css';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config()\r\nconst store = configureStore(initialState)\r\n\r\nclass App extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render () { \r\n    return (\r\n        <Provider store={store}>\r\n          <Router>\r\n            <Navbar className=\"app-navbar fixed-top\" expand=\"xs\">\r\n              <NavbarBrand href=\"https://t.me/MasterChechBot\" target=\"_blank\" className=\"color-app\">@MasterChech</NavbarBrand>\r\n              <Nav navbar>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                  <DropdownToggle nav caret className=\"color-app\">\r\n                    Menu do Chech\r\n                  </DropdownToggle>\r\n                </UncontrolledDropdown>\r\n                </Nav>\r\n            </Navbar>\r\n            <div className=\"container d-flex h-100\">\r\n              <div className=\"align-self-center w-100\">\r\n                <Route path=\"/\" exact component={CatalogMenuDescriptionPage} />\r\n              </div>\r\n            </div>\r\n            <div className=\"footer\">\r\n              <p>Bot for telegram &#129302;</p>\r\n            </div>\r\n          </Router>\r\n        </Provider>\r\n        )\r\n    };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}